# render.yaml  –  Scientific AI Orchestrator  (Python 3.11 wheels available)
services:
  # ───────────── API ─────────────
  - type: web
    name: orchestrator-api
    runtime: python
    pythonVersion: 3.11        # ← pin Python so pydantic-core wheel exists
    plan: free
    buildCommand: pip install -r requirements.txt
    startCommand: uvicorn app.main:app --host 0.0.0.0 --port $PORT
    healthCheckPath: /health
    envVars:
      - key: OPENAI_API_KEY
        sync: false
      - key: OPENAI_MODEL
        value: gpt-4o-mini
      - key: REDIS_URL
        fromService:
          name: orchestrator-redis
          type: redis
          property: connectionString
      - key: COST_THRESHOLD_USD
        value: "0.05"
      - key: CORS_ORIGINS
        value: '["https://your-app.vercel.app","http://localhost:3000"]'

  # ─────────── Worker ───────────
  - type: worker
    name: orchestrator-worker
    runtime: python
    pythonVersion: 3.11
    plan: free
    buildCommand: pip install -r requirements.txt
    startCommand: celery -A app.workers worker --loglevel=info --concurrency=2
    envVars:
      - key: OPENAI_API_KEY
        sync: false
      - key: OPENAI_MODEL
        value: gpt-4o-mini
      - key: REDIS_URL
        fromService:
          name: orchestrator-redis
          type: redis
          property: connectionString
      - key: COST_THRESHOLD_USD
        value: "0.05"

  # ─────────── Redis ────────────
  - type: redis
    name: orchestrator-redis
    plan: free
    maxmemoryPolicy: allkeys-lru
    ipAllowList: []

